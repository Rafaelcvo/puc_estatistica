# Usando o select.
select(flights, year)
library(nycflights13)
library(dplyr)
View(flights)
# filtando os dados
filter(flights, month == 1, day == 2)
# Usando o select.
select(flights, year)
# Usando o select.
select(flights, year,day)
select(flights, year:day)
select(flights, ~(year:day))
select(flights, -(year:day))
sele <- select(flights, year:day)
sele
select(flights, contains("ra"))
select(flights, contains("a"))
select(flights, contains("1000"))
select(flights, contains("100"))
select(flights, contains(837))
select(flights, contains("837"))
select(flights, contains("b"))
select(flights, contains("ba"))
# Renomeando as variaveis
rename(flights, day = dia)
# Renomeando as variaveis
rename(flights, dia = day)
library(dplyr)
View(flights)
# filtando os dados
filter(flights, month == 1, day == 2)
# Todos os voos de novembro e dezembro
(filter(flights, month == 11 | month == 12))
# Renomeando as variaveis
rename(flights, dia = day)
select(flights, dia = day)
# Movendo as vairaveis para o começo.
select(flights, time_hour, everything())
# Movendo as vairaveis para o começo.
df <- select(flights, time_hour, everything())
View(df)
library(tidyr)
library(nycflights13)
library(dplyr)
# Operacoes com o Pipe.
by_dest <- group_by(flights, dest)
View(by_dest)
delay <- summarise(by_dest,
count = n(),
dist = mean(distance, na.rm = TRUE),
delay = mean(arr_delay, na.rm = TRUE)
)
delay <- filter(delay, count > 20, dest != "HNL")
library(ggplot2)
ggplot(data = delay, mapping = aes(x = dist, y = delay)) +
geom_point(aes(size = count), alpha = 1/3) +
geom_smooth(se = FALSE)
delay2 <- summarise(by_dest,
count = n()
)
View(delay2)
# Outra maneira de usar o pipe.
delays <- flights %>%
group_by(dest) %>%
summarize(
count = n(),
dist = mean(distance, na.rm = TRUE),
delay = mean(arr_delay, na.rm = TRUE)
) %>%
filter(count > 20, dest != "HNL")
print(count)
# Outra maneira de usar o pipe.
delays <- flights %>%
group_by(dest) %>%
summarize(
conte = n(),
dist = mean(distance, na.rm = TRUE),
delay = mean(arr_delay, na.rm = TRUE)
) %>%
filter(count > 20, dest != "HNL")
# Outra maneira de usar o pipe.
delays <- flights %>%
group_by(dest) %>%
summarize(
conte = n(),
dist = mean(distance, na.rm = TRUE),
delay = mean(arr_delay, na.rm = TRUE)
) %>%
filter(conte > 20, dest != "HNL")
print(count)
print(count)
print(count)
print(count)
#importando os dataset
df <- Prestige
library(carData)
#importando os dataset
df <- Prestige
View(df)
View(df)
# 1. Filtrando as colunas para remover Census e Type.
#df$census <- NULL
#df$type <- NULL
df <- df[,c(1,2,3,4)]
# 2. Matriz de correlação.
# Correlaçao de Pearson.
cor(df, df$prestige, method = "pearson")
# 2. Matriz de correlação.
# Correlaçao de Pearson.
cor(df, df$prestige)
# 2. Matriz de correlação.
# Correlaçao de Pearson.
cor(df, df$prestige)
# 2. Matriz de correlação.
# Correlaçao de Pearson.
cor(df, df$prestige)
rl <- lm(prestige ~ education + income + women, data = df)
summary(rl)
plot(rl, which = 5)
require(ISLR)
par(mfrow = c(1,8))
for (i in 1:8) {
hist(Smarket[,i], main = names(Smarket)[i])
}
for (i in 1:8) {
boxplot(Smarket[,1], main=names(Smarket)[i])
}
# Obtendo os dados ausentes.
#install.packages("Amelia")
#install.packages("mlbench")
library(Amelia)
library(mlbench)
library(corrplot)
par(mfrow = c(1,1))
correlations <- cor(Smarket[,1:8])
corrplot(correlations, method = "circle")
pairs(Smarket, col = Smarket$Direction)
# Distribuição de densidade.
library(ggplot2)
library(caret)
x <- Smarket[,1:8]
y <- Smarket[,9]
scales <- list(x=list(relation="free"), y=list(relation="free"))
featurePlot(x=x, y=y, plot = "density", scales=scales)
glm.fit <- glm(Direction ~ Lag1 + Lag2 + Lag3 + Lag4 + Lag5 +
Volume, data = Smarket, family = binomial)
# Informando sobre o ajuste
summary(glm.fit)
glm.probs <- predict(glm.fit, type = "response")
glm.probs[1:5]
# Prevendo se o mercado vai subir(up) ou descer(down) com limiar de 0,5
glm.pred <- ifelse(glm.probs > 0.5, "Up", "Down")
# Anexando ao datasets
attach(Smarket)
table(glm.pred, Direction)
# Calculando a median
mean(glm.pred == Direction)
# Criando amostra de treino e teste
train = Year < 2005
glm.fit <- glm(Direction ~ Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume,
data = Smarket,
family = binomial,
subset = train)
glm.probs <- predict(glm.fit, newdata = Smarket[!train,], type = "response")
glm.pred <- ifelse(glm.probs > 0.5, "Up", "Down")
# Criando um nova variavel resposta
Direction.2005 <- Smarket$Direction[!train]
table(glm.pred, Direction.2005)
# Resolução do sobreajuste
# Resolução do sobreajuste
glm.fit = glm(Direction ~ Lag1 + Lag2 + Lag3, data = Smarket,
family = binomial, subset = train)
glm.probs = predict(glm.fit, newdata = Smarket[!train,], type = "response")
glm.pred = ifelse(glm.probs > 0.5, "Up", "Down")
table(glm.pred, Direction.2005)
mean(glm.pred == Direction.2005)
summary(glm.fit)
setwd("~/git/puc_estatistica")
library(readxl)
library(Amelia)
library(mlbench)
library(corrplot)
library(MASS)
# Importando o dataset.
df <- read_excel("Atividade Avaliativa 2 - birthweight.xlsx")
# Verificando os dados com summary
summary(df)
# Plotando os dados
plot(df)
# Verificando a existencia de dados ausentes
missmap(df, col = c("red", "blue"))
# Criando uma matrix de dispersano
pairs(df, col = df$lowbwt)
# Calculando a correlação entre as variaveis
correlations <- cor(df[,1:14])
corrplot(correlations, method = "circle")
# Ajustando o modelo.
attach(df)
ajuste <- glm(lowbwt ~ headcirumference + length + Birthweight + Gestation + smoker +
motherage + mnocig + mheight + mppwt + fage + fedyrs + fnocig + fheight,
family = binomial)
summary(ajuste)
# Selecao do melhor modelo.
stepAIC(ajuste, direction = "both")
# Ajustando um novo modelo
ajuste2 <- glm(formula = lowbwt ~ Birthweight, family = binomial)
summary(ajuste2)
# Calculando os odds
exp(cbind(coef(ajuste2), confint.default(ajuste2)))
plot(ajuste2)
x <- list(500,550,550,600,700,750,2000)
x
median(x)
x <- c(500,550,550,600,700,750,2000)
median(x)
mean(x)
x <- c(500,550,550,600,700,750,3950)
median(x)
mean(x)
x <- c(500,550,550,550,600,700,750,2000)
median(x)
mean(x)
# Calculando os odds
exp(cbind(coef(ajuste2), confint.default(ajuste2)))
# Teste chi-quadrado
pchisq(ajuste2$deviance, ajuste2$df.residual, lower.tail = F)
pchisq(ajuste2$null.deviance - ajuste2$deviance,
ajuste2$df.null - ajuste2$df.residual, lower.tail = F)
library(carData)
# Identificando multicolinearidade
vif(ajuste2)
# Identificando multicolinearidade
vi(ajuste2)
# Identificando multicolinearidade
library(car)
library(pscl)
# Estimando o coeficiente de determinação
pR2(ajuste2)
plot(ajuste2)
par(mfrow=c(2,2))
plot(ajuste2)
vif(ajuste2)
library(carData)
vif(ajuste2)
source('~/git/puc_estatistica/atividade2.R')
Importando as bibliotecas
library(readxl)
library(Amelia)
library(mlbench)
library(corrplot)
library(MASS)
library(pscl)
# Importando o dataset.
df <- read_excel("Atividade Avaliativa 2 - birthweight.xlsx")
# Verificando os dados com summary
summary(df)
# Plotando os dados
plot(df)
# Verificando a existencia de dados ausentes
missmap(df, col = c("red", "blue"))
# Criando uma matrix de dispersano
pairs(df, col = df$lowbwt)
# Calculando a correlação entre as variaveis
correlations <- cor(df[,1:14])
corrplot(correlations, method = "circle")
# Ajustando o modelo.
attach(df)
ajuste <- glm(lowbwt ~ headcirumference + length + Birthweight + Gestation + smoker +
motherage + mnocig + mheight + mppwt + fage + fedyrs + fnocig + fheight,
family = binomial)
summary(ajuste)
# Selecao do melhor modelo.
stepAIC(ajuste, direction = "both")
# Ajustando um novo modelo
ajuste2 <- glm(formula = lowbwt ~ Birthweight, family = binomial)
summary(ajuste2)
# Calculando os odds
exp(cbind(coef(ajuste2), confint.default(ajuste2)))
# Calculando os odds
exp(cbind(coef(ajuste2), confint.default(ajuste2)))
# Teste chi-quadrado
pchisq(ajuste2$deviance, ajuste2$df.residual, lower.tail = F)
pchisq(ajuste2$null.deviance - ajuste2$deviance,
ajuste2$df.null - ajuste2$df.residual, lower.tail = F)
# Estimando o coeficiente de determinação
pR2(ajuste2)
library(readxl)
library(readxl)
bebidas <- read_excel("Atividade Avaliativa 4 - BEBIDA.xlsx")
bebida_ts <- ts(bebidas, )
acf(bebida_ts)
par(mfrow = c(1,1))
acf(bebida_ts)
pacf(bebida_ts)
